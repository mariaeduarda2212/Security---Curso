# API - É um lugar para disponibilizar recursos e/ou funcionalidades
# 1. Objetivo - Criar um API que disponibiliza a consulta, criação, edição e exclusão de livros.
# 2. URL Base (é o local para o qual estaremos fazendo as nossas requisições) - localhost
# 3. Endpoints (quais são os tipos de funcionalidades que vou disponibilizar na minha API. É o endereço que a pessoa tem que digitar para chamar através de uma ferramenta como o postman para fazer algum tipo de operação) 
    # - localshost/livros (GET) - obter todos os livros
    # - localhost/livros (POST) - criar novos livros
    # - localhost/livros/id (GET) - obter um livro por id
    # - localhost/livros/id (PUT) - alterar um livro por id
    # - localhost/livros/id (DELETE) - excluir um livro por id
# 4. Quais recursos - Livros

from flask import Flask, jsonify, request

app = Flask(__name__)

livros = [
    {
        'id': 1,
        'título': 'O Senhor dos Anéis - A Sociedade do Anel',
        'autor': 'J.R.R Tolkien'
    },

     {
        'id': 2,
        'título': 'Harry Potter e a pedra Filosofal',
        'autor': 'J.k Howling'
    },

     {
        'id': 3,
        'título': 'James Clear',
        'autor': 'Habitos Atômicos'
    },
]

#Vamos ter que criar as seguintes APIs
# Consultar (todos) (vamos criar uma função que irá retornar algo)
#Temos que criar uma função para cada endpoint que queremos fornecer

@app.route('/livros', methods=['GET'])
def obter_livros():
    return jsonify(livros)

# Consultar por (id)

# Para funcionar eu preciso criar uma rota
# Estou especificando que eu espero um número inteiro e esse número interio será identificado com a palavra chave id. Portanto quando me passarem o valor, ele será passado para a minha função porque a função também espera esse mesmo parametro que é ID

@app.route('/livros/<int:id>',methods=['GET'])
def obter_livro_por_id(id): 
    for livro in livros:
        if livro.get('id') == id:
            return jsonify(livro)

#Se eu pesquisar pelo livro um (id), ele vai retornar para mim o livro um livro.get('id')
    
# Editar
@app.route('/livros/<int:id>',methods=['PUT'])
def editar_livro_por_id(id):
    Livros_alterado = request.get_json()
    for indice, livro in enumerate(livros):
        if livro.get('id') == id:
            livros[indice].update(Livros_alterado)
            return jsonify(livros[indice])
        
#Criar
@app.route('/livros',methods=['POST'])
def incluir_novo_livro():
    novo_livro = request.get_json()
    livros.append(novo_livro)

    return jsonify(livros)

# Excluir
@app.route('/livros/<int:id>',methods=['DELETE'])
def excluir_livro(id):
    for indice, livro in enumerate(livros):
       if livro.get('id') == id:
           del livros[indice]

    return jsonify(livros)

app.run(port=5000,host='localhost',debug=True)
